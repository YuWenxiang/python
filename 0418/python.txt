
九：高级特性
Python中，代码不是越多越好，而是越少越好。代码越少，开发效率越高。

1：切片
取一个list或tuple的部分元素
eg：
>>> L[0:3]
['Michael', 'Sarah', 'Tracy']
>>> L[:3]
['Michael', 'Sarah', 'Tracy']
>>> L[1:3]
['Sarah', 'Tracy']
字符串'xxx'也可以看成是一种list，每个元素就是一个字符。
2：迭代
如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple
在Python中，迭代是通过for ... in来完成（list，tuple,set,str,dict...）
如何判断一个对象是否可迭代对象eg：
>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
使用内建的isinstance函数可以判断一个变量是不是字符串
>>> x = 'abc'
>>> y = 123
>>> isinstance(x, str)
True
3：列表生成式
>>> [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
for循环后面还可以加上if判断
>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
还可以使用两层循环
>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
4：生成器
在Python中，这种一边循环一边计算的机制，称为生成器：generator
第一种方法很简单，只要把一个列表生成式的[]改成()
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x1022ef630>
可以通过next()函数获得generator的下一个返回值。next(g)。一般通过迭代使用
另一种方法;
如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator
这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行
5:迭代器
Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误
Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。
